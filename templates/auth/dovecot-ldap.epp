<%- |
  Optional[String] $hosts = undef,
  Optional[String] $uris = undef,
  Optional[String] $dn = undef,
  Optional[String] $dnpass = undef,
  Optional[Enum['yes','no']] $sasl_bind = undef,
  Optional[String] $sasl_mech = undef,
  Optional[String] $sasl_realm = undef,
  Optional[String] $sasl_authz_id = undef,
  Optional[Enum['yes','no']] $tls = undef,
  Optional[String] $tls_ca_cert_file = undef,
  Optional[String] $tls_ca_cert_dir = undef,
  Optional[String] $tls_cipher_suite = undef,
  Optional[String] $tls_cert_file = undef,
  Optional[String] $tls_key_file = undef,
  Optional[Enum['never','hard','demand','allow','try']] $tls_require_cert = undef,
  Optional[String] $ldaprc_path = undef,
  Optional[Integer] $debug_level = undef,
  Optional[Enum['yes','no']] $auth_bind = undef,
  Optional[String] $auth_bind_userdn = undef,
  Optional[String] $ldap_version = undef,
  String $base = '',
  Optional[Enum['never','searching','finding','always']] $deref = undef,
  Optional[Enum['base','onelevel','subtree']] $scope = undef,
  Optional[String] $user_attrs = undef,
  Optional[String] $user_filter = undef,
  Optional[String] $pass_attrs = undef,
  Optional[String] $pass_filter = undef,
  Optional[String] $iterate_attrs = undef,
  Optional[String] $iterate_filter = undef,
  Optional[String] $default_pass_scheme = undef,
| -%>
# This file is commonly accessed via passdb {} or userdb {} section in
# conf.d/auth-ldap.conf.ext

# This file is opened as root, so it should be owned by root and mode 0600.
#
# http://wiki2.dovecot.org/AuthDatabase/LDAP
#
# NOTE: If you're not using authentication binds, you'll need to give
# dovecot-auth read access to userPassword field in the LDAP server.
# With OpenLDAP this is done by modifying /etc/ldap/slapd.conf. There should
# already be something like this:

# access to attribute=userPassword
#        by dn="<dovecot's dn>" read # add this
#        by anonymous auth
#        by self write
#        by * none

# Space separated list of LDAP hosts to use. host:port is allowed too.
#hosts =
<%- if $hosts { -%>
hosts = <%= $hosts %>
<%- } -%>

# LDAP URIs to use. You can use this instead of hosts list. Note that this
# setting isn't supported by all LDAP libraries.
#uris = 
<%- if $uris { -%>
uris = <%= $uris %>
<%- } -%>

# Distinguished Name - the username used to login to the LDAP server.
# Leave it commented out to bind anonymously (useful with auth_bind=yes).
#dn = 
<%- if $dn { -%>
dn = <%= $dn %>
<%- } -%>

# Password for LDAP server, if dn is specified.
#dnpass = 
<%- if $dnpass { -%>
dnpass = <%= $dnpass %>
<%- } -%>

# Use SASL binding instead of the simple binding. Note that this changes
# ldap_version automatically to be 3 if it's lower. Also note that SASL binds
# and auth_bind=yes don't work together.
#sasl_bind = no
<%- if $sasl_bind { -%>
sasl_bind = <%= $sasl_bind %>
<%- } -%>
# SASL mechanism name to use.
#sasl_mech =
<%- if $sasl_mech { -%>
sasl_mech = <%= $sasl_mech %>
<%- } -%>
# SASL realm to use.
#sasl_realm =
<%- if $sasl_realm { -%>
sasl_realm = <%= $sasl_realm %>
<%- } -%>
# SASL authorization ID, ie. the dnpass is for this "master user", but the
# dn is still the logged in user. Normally you want to keep this empty.
#sasl_authz_id =
<%- if $sasl_authz_id { -%>
sasl_authz_id = <%= $sasl_authz_id %>
<%- } -%>

# Use TLS to connect to the LDAP server.
#tls = no
<%- if $tls { -%>
tls = <%= $tls %>
<%- } -%>
# TLS options, currently supported only with OpenLDAP:
#tls_ca_cert_file =
<%- if $tls_ca_cert_file { -%>
tls_ca_cert_file = <%= $tls_ca_cert_file %>
<%- } -%>
#tls_ca_cert_dir =
<%- if $tls_ca_cert_dir { -%>
tls_ca_cert_dir = <%= $tls_ca_cert_dir %>
<%- } -%>
#tls_cipher_suite =
<%- if $tls_cipher_suite { -%>
tls_cipher_suite = <%= $tls_cipher_suite %>
<%- } -%>
# TLS cert/key is used only if LDAP server requires a client certificate.
#tls_cert_file =
<%- if $tls_cert_file { -%>
tls_cert_file = <%= $tls_cert_file %>
<%- } -%>
#tls_key_file =
<%- if $tls_key_file { -%>
tls_key_file = <%= $tls_key_file %>
<%- } -%>
# Valid values: never, hard, demand, allow, try
#tls_require_cert =
<%- if $tls_require_cert { -%>
tls_require_cert = <%= $tls_require_cert %>
<%- } -%>

# Use the given ldaprc path.
#ldaprc_path =
<%- if $ldaprc_path { -%>
ldaprc_path = <%= $ldaprc_path %>
<%- } -%>

# LDAP library debug level as specified by LDAP_DEBUG_* in ldap_log.h.
# -1 = everything. You may need to recompile OpenLDAP with debugging enabled
# to get enough output.
#debug_level = 0
<%- if $debug_level { -%>
debug_level = <%= $debug_level %>
<%- } -%>

# Use authentication binding for verifying password's validity. This works by
# logging into LDAP server using the username and password given by client.
# The pass_filter is used to find the DN for the user. Note that the pass_attrs
# is still used, only the password field is ignored in it. Before doing any
# search, the binding is switched back to the default DN.
#auth_bind = no
<%- if $auth_bind { -%>
auth_bind = <%= $auth_bind %>
<%- } -%>

# If authentication binding is used, you can save one LDAP request per login
# if users' DN can be specified with a common template. The template can use
# the standard %variables (see user_filter). Note that you can't
# use any pass_attrs if you use this setting.
#
# If you use this setting, it's a good idea to use a different
# dovecot-ldap.conf.ext for userdb (it can even be a symlink, just as long as
# the filename is different in userdb's args). That way one connection is used
# only for LDAP binds and another connection is used for user lookups.
# Otherwise the binding is changed to the default DN before each user lookup.
#
# For example:
#   auth_bind_userdn = cn=%u,ou=people,o=org
#
#auth_bind_userdn =
<%- if $auth_bind_userdn { -%>
auth_bind_userdn = <%= $auth_bind_userdn %>
<%- } -%>

# LDAP protocol version to use. Likely 2 or 3.
#ldap_version = 3
<%- if $ldap_version { -%>
ldap_version = <%= $ldap_version %>
<%- } -%>

# LDAP base. %variables can be used here.
# For example: dc=mail, dc=example, dc=org
base = <%= $base %>

# Dereference: never, searching, finding, always
#deref = never
<%- if $deref { -%>
deref = <%= $deref %>
<%- } -%>

# Search scope: base, onelevel, subtree
#scope = subtree
<%- if $scope { -%>
scope = <%= $scope %>
<%- } -%>

# User attributes are given in LDAP-name=dovecot-internal-name list. The
# internal names are:
#   uid - System UID
#   gid - System GID
#   home - Home directory
#   mail - Mail location
#
# There are also other special fields which can be returned, see
# http://wiki2.dovecot.org/UserDatabase/ExtraFields
#user_attrs = homeDirectory=home,uidNumber=uid,gidNumber=gid
<%- if $user_attrs { -%>
user_attrs = <%= $user_attrs %>
<%- } -%>

# Filter for user lookup. Some variables can be used (see
# http://wiki2.dovecot.org/Variables for full list):
#   %u - username
#   %n - user part in user@domain, same as %u if there's no domain
#   %d - domain part in user@domain, empty if user there's no domain
#user_filter = (&(objectClass=posixAccount)(uid=%u))
<%- if $user_filter { -%>
user_filter = <%= $user_filter %>
<%- } -%>

# Password checking attributes:
#  user: Virtual user name (user@domain), if you wish to change the
#        user-given username to something else
#  password: Password, may optionally start with {type}, eg. {crypt}
# There are also other special fields which can be returned, see
# http://wiki2.dovecot.org/PasswordDatabase/ExtraFields
#pass_attrs = uid=user,userPassword=password
<%- if $pass_attrs { -%>
pass_attrs = <%= $pass_attrs %>
<%- } -%>

# If you wish to avoid two LDAP lookups (passdb + userdb), you can use
# userdb prefetch instead of userdb ldap in dovecot.conf. In that case you'll
# also have to include user_attrs in pass_attrs field prefixed with "userdb_"
# string. For example:
#pass_attrs = uid=user,userPassword=password,\
#  homeDirectory=userdb_home,uidNumber=userdb_uid,gidNumber=userdb_gid

# Filter for password lookups
#pass_filter = (&(objectClass=posixAccount)(uid=%u))
<%- if $pass_filter { -%>
pass_filter = <%= $pass_filter %>
<%- } -%>

# Attributes and filter to get a list of all users
#iterate_attrs = uid=user
<%- if $iterate_attrs { -%>
iterate_attrs = <%= $iterate_attrs %>
<%- } -%>
#iterate_filter = (objectClass=posixAccount)
<%- if $iterate_filter { -%>
iterate_filter = <%= $iterate_filter %>
<%- } -%>

# Default password scheme. "{scheme}" before password overrides this.
# List of supported schemes is in: http://wiki2.dovecot.org/Authentication
#default_pass_scheme = CRYPT
<%- if $default_pass_scheme { -%>
default_pass_scheme = <%= $default_pass_scheme %>
<%- } -%>
